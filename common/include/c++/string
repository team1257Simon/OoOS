#ifndef __CXX_STRING
#define __CXX_STRING
#include "bits/basic_string.hpp"
namespace std
{
    typedef basic_string<char> string;
    typedef basic_string<wchar_t> wstring;
    typedef basic_string<char8_t> u8string;
    typedef basic_string<char16_t> u16string;
    typedef basic_string<char32_t> u32string;
    string to_string(int value);
    string to_string(long value);
    string to_string(long long value);
    string to_string(unsigned int value);
    string to_string(unsigned long value);
    string to_string(unsigned long long value);
    string to_string(void* ptr);
	string to_string(float value);
    string to_string(double value);
    string to_string(long double value);
	string to_string(bool value);
    wstring to_wstring(int value);
	wstring to_wstring(long value);
	wstring to_wstring(long long value);
	wstring to_wstring(unsigned int value);
	wstring to_wstring(unsigned long value);
	wstring to_wstring(unsigned long long value);
	wstring to_wstring(void* ptr);
	wstring to_wstring(float value);
    wstring to_wstring(double value);
    wstring to_wstring(long double value);
	wstring to_wstring(bool value);
    u8string to_u8string(int value);
	u8string to_u8string(long value);
	u8string to_u8string(long long value);
	u8string to_u8string(unsigned int value);
	u8string to_u8string(unsigned long value);
	u8string to_u8string(unsigned long long value);
	u8string to_u8string(void* ptr);
	u8string to_u8string(float value);
    u8string to_u8string(double value);
    u8string to_u8string(long double value);
	u8string to_u8string(bool value);
    u16string to_u16string(int value);
	u16string to_u16string(long value);
	u16string to_u16string(long long value);
	u16string to_u16string(unsigned int value);
	u16string to_u16string(unsigned long value);
	u16string to_u16string(unsigned long long value);
	u16string to_u16string(void* ptr);
	u16string to_u16string(float value);
    u16string to_u16string(double value);
    u16string to_u16string(long double value);
	u16string to_u16string(bool value);
    u32string to_u32string(int value);
	u32string to_u32string(long value);
	u32string to_u32string(long long value);
	u32string to_u32string(unsigned int value);
	u32string to_u32string(unsigned long value);
	u32string to_u32string(unsigned long long value);
	u32string to_u32string(void* ptr);
	u32string to_u32string(float value);
    u32string to_u32string(double value);
    u32string to_u32string(long double value);
	u32string to_u32string(bool value);
	extension namespace ext
	{
		struct hex_t{};
		constexpr inline hex_t hex;
		struct nphex_t{};
		constexpr inline nphex_t nphex;
		std::string fcvt(float f, int ndigits);
		std::string fcvtd(double d, int ndigits);
		std::string fcvtl(long double ld, int ndigits);
		std::string fcvth(float f, int ndigits);
        std::string fcvthd(double d, int ndigits);
        std::string fcvthl(long double ld, int ndigits);
		std::string to_upper(std::string const& str);
		std::string to_lower(std::string const& str);
	}
	extension string to_string(int value, ext::hex_t);
	extension string to_string(long value, ext::hex_t);
	extension string to_string(long long value, ext::hex_t);
	extension string to_string(unsigned int value, ext::hex_t);
	extension string to_string(unsigned long value, ext::hex_t);
	extension string to_string(unsigned long long value, ext::hex_t);
	extension wstring to_wstring(int value, ext::hex_t);
	extension wstring to_wstring(long value, ext::hex_t);
	extension wstring to_wstring(long long value, ext::hex_t);
	extension wstring to_wstring(unsigned int value, ext::hex_t);
	extension wstring to_wstring(unsigned long value, ext::hex_t);
	extension wstring to_wstring(unsigned long long value, ext::hex_t);
	extension u8string to_u8string(int value, ext::hex_t);
	extension u8string to_u8string(long value, ext::hex_t);
	extension u8string to_u8string(long long value, ext::hex_t);
	extension u8string to_u8string(unsigned int value, ext::hex_t);
	extension u8string to_u8string(unsigned long value, ext::hex_t);
	extension u8string to_u8string(unsigned long long value, ext::hex_t);
	extension u16string to_u16string(int value, ext::hex_t);
	extension u16string to_u16string(long value, ext::hex_t);
	extension u16string to_u16string(long long value, ext::hex_t);
	extension u16string to_u16string(unsigned int value, ext::hex_t);
	extension u16string to_u16string(unsigned long value, ext::hex_t);
	extension u16string to_u16string(unsigned long long value, ext::hex_t);
	extension u32string to_u32string(int value, ext::hex_t);
	extension u32string to_u32string(long value, ext::hex_t);
	extension u32string to_u32string(long long value, ext::hex_t);
	extension u32string to_u32string(unsigned int value, ext::hex_t);
	extension u32string to_u32string(unsigned long value, ext::hex_t);
	extension u32string to_u32string(unsigned long long value, ext::hex_t);
	extension string to_string(int value, ext::nphex_t);
	extension string to_string(long value, ext::nphex_t);
	extension string to_string(long long value, ext::nphex_t);
	extension string to_string(unsigned int value, ext::nphex_t);
	extension string to_string(unsigned long value, ext::nphex_t);
	extension string to_string(unsigned long long value, ext::nphex_t);
	extension wstring to_wstring(int value, ext::nphex_t);
	extension wstring to_wstring(long value, ext::nphex_t);
	extension wstring to_wstring(long long value, ext::nphex_t);
	extension wstring to_wstring(unsigned int value, ext::nphex_t);
	extension wstring to_wstring(unsigned long value, ext::nphex_t);
	extension wstring to_wstring(unsigned long long value, ext::nphex_t);
	extension u8string to_u8string(int value, ext::nphex_t);
	extension u8string to_u8string(long value, ext::nphex_t);
	extension u8string to_u8string(long long value, ext::nphex_t);
	extension u8string to_u8string(unsigned int value, ext::nphex_t);
	extension u8string to_u8string(unsigned long value, ext::nphex_t);
	extension u8string to_u8string(unsigned long long value, ext::nphex_t);
	extension u16string to_u16string(int value, ext::nphex_t);
	extension u16string to_u16string(long value, ext::nphex_t);
	extension u16string to_u16string(long long value, ext::nphex_t);
	extension u16string to_u16string(unsigned int value, ext::nphex_t);
	extension u16string to_u16string(unsigned long value, ext::nphex_t);
	extension u16string to_u16string(unsigned long long value, ext::nphex_t);
	extension u32string to_u32string(int value, ext::nphex_t);
	extension u32string to_u32string(long value, ext::nphex_t);
	extension u32string to_u32string(long long value, ext::nphex_t);
	extension u32string to_u32string(unsigned int value, ext::nphex_t);
	extension u32string to_u32string(unsigned long value, ext::nphex_t);
	extension u32string to_u32string(unsigned long long value, ext::nphex_t);
#ifdef INST_STR
#define STR_EXTERN_IMPL
#else
#define STR_EXTERN_IMPL extern
#endif
STR_EXTERN_IMPL template class basic_string<char>;
// STR_EXTERN_IMPL template class basic_string<wchar_t>;
// STR_EXTERN_IMPL template class basic_string<char8_t>;
// STR_EXTERN_IMPL template class basic_string<char16_t>;
// STR_EXTERN_IMPL template class basic_string<char32_t>;
STR_EXTERN_IMPL template std::string operator+(std::string const&, std::string const&);
STR_EXTERN_IMPL template std::string operator+(std::string const&, const char*);
STR_EXTERN_IMPL template std::string operator+(const char*, std::string const&);
STR_EXTERN_IMPL template std::string operator+(std::string const&, char);
STR_EXTERN_IMPL template std::string operator+(char, std::string const&);
// STR_EXTERN_IMPL template std::wstring operator+(std::wstring const&, std::wstring const&);
// STR_EXTERN_IMPL template std::wstring operator+(std::wstring const&, const wchar_t*);
// STR_EXTERN_IMPL template std::wstring operator+(const wchar_t*, std::wstring const&);
// STR_EXTERN_IMPL template std::wstring operator+(std::wstring const&, wchar_t);
// STR_EXTERN_IMPL template std::wstring operator+(wchar_t, std::wstring const&);
// STR_EXTERN_IMPL template std::u8string operator+(std::u8string const&, std::u8string const&);
// STR_EXTERN_IMPL template std::u8string operator+(std::u8string const&, const char8_t*);
// STR_EXTERN_IMPL template std::u8string operator+(const char8_t*, std::u8string const&);
// STR_EXTERN_IMPL template std::u8string operator+(std::u8string const&, char8_t);
// STR_EXTERN_IMPL template std::u8string operator+(char8_t, std::u8string const&);
// STR_EXTERN_IMPL template std::u16string operator+(std::u16string const&, std::u16string const&);
// STR_EXTERN_IMPL template std::u16string operator+(std::u16string const&, const char16_t*);
// STR_EXTERN_IMPL template std::u16string operator+(const char16_t*, std::u16string const&);
// STR_EXTERN_IMPL template std::u16string operator+(std::u16string const&, char16_t);
// STR_EXTERN_IMPL template std::u16string operator+(char16_t, std::u16string const&);
// STR_EXTERN_IMPL template std::u32string operator+(std::u32string const&, std::u32string const&);
// STR_EXTERN_IMPL template std::u32string operator+(std::u32string const&, const char32_t*);
// STR_EXTERN_IMPL template std::u32string operator+(const char32_t*, std::u32string const&);
// STR_EXTERN_IMPL template std::u32string operator+(std::u32string const&, char32_t);
// STR_EXTERN_IMPL template std::u32string operator+(char32_t, std::u32string const&);
}
void xklog(std::string const& str);
#endif