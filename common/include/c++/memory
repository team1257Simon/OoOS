#ifndef __MEMORY
#define __MEMORY
#include "bits/stl_allocator.h"
#include "concepts"
#include "tuple"
#include "bits/unique_ptr.hpp"
namespace std
{
    template<typename T, typename ... Args> requires __detail::__dynamic_constructible<T, Args...> constexpr T* construct_at(T* ptr, Args ... args) noexcept(is_nothrow_constructible_v<T, Args...>) { return ::new(static_cast<void*>(ptr)) T(std::forward<Args>(args)...); }
    extension namespace ext
    {
        template<typename T, typename ... Args, size_t ... Is> constexpr T* __tuple_construct(T* ptr, tuple<Args...>&& args, index_sequence<Is...>) { return construct_at(ptr, get<Is>(forward<tuple<Args...>>(args))...);  }
        template<typename T, typename ... Args> requires constructible_from<T, Args...> constexpr T* tuple_construct(T* ptr, tuple<Args...>&& args) { return __tuple_construct(ptr, forward<tuple<Args...>>(args), make_index_sequence<sizeof...(Args)>{}); }
    }
    template<__detail::__non_array T, typename ... Args> requires constructible_from<T, Args...> constexpr unique_ptr<T> make_unique(Args&& ... args) { return unique_ptr<T>(construct_at(static_cast<T*>(::operator new(sizeof(T), static_cast<align_val_t>(alignof(T)))), forward<Args>(args)...)); }
    template<__detail::__unbounded_array T> constexpr unique_ptr<T> make_unique(size_t s) { return unique_ptr<T>(construct_at(static_cast<remove_extent_t<T>*>(::operator new[](s * sizeof(T), static_cast<align_val_t>(alignof(T)))))); }
    // More as needed
}
#endif