#ifndef __SET
#define __SET
#include "bits/stl_tree.hpp"
#include "functional"
#include "memory"
#include "initializer_list"
#include "bits/stl_iterator.hpp"
namespace std
{
    template<typename KT, __valid_comparator<KT> CT = std::less<void>, allocator_object<KT> AT = std::allocator<KT>>
    class set : public __rb_tree<KT, CT, AT>
    {
        using __base = __rb_tree<KT, CT, AT>;
        typedef __node<KT>* __link_t;
        typedef __node<KT> const* __clink_t;
        typedef typename __base::__res_pair __res_t;
        typedef typename __base::__pos_pair __pos_t;
    public:
        typedef KT key_type;
        typedef KT value_type;
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef CT key_compare;
        typedef AT allocator_type;
        typedef value_type& reference;
        typedef value_type const& const_reference;
        typedef value_type* pointer;
        typedef const value_type* const_pointer;
        typedef __tree_iterator<value_type> iterator;
        typedef __tree_const_iterator<value_type> const_iterator;
        typedef std::reverse_iterator<iterator> reverse_iterator;
        typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
        constexpr allocator_type get_allocator() const noexcept { return allocator_type(this->__alloc); }
        constexpr iterator begin() noexcept { return iterator{ this->__l_begin() }; }
        constexpr iterator end() noexcept { return iterator{ this->__end() }; }
        constexpr const_iterator cbegin() const noexcept { return const_iterator{ this->__l_begin() }; }
        constexpr const_iterator cend() const noexcept { return const_iterator{ this->__end() }; }
        constexpr const_iterator begin() const noexcept { return const_iterator{ this->__l_begin()}; }
        constexpr const_iterator end() const noexcept { return const_iterator{ this->__end() }; }
        constexpr reverse_iterator rbegin() noexcept { return reverse_iterator{ begin() }; }
        constexpr reverse_iterator rend() noexcept { return reverse_iterator{ end() }; }
        constexpr const_reverse_iterator crbegin() const noexcept { return const_reverse_iterator{ cbegin() }; }
        constexpr const_reverse_iterator crend() const noexcept { return const_reverse_iterator{ cend() }; }
        constexpr const_reverse_iterator rbegin() const noexcept { return const_reverse_iterator{ begin() }; }
        constexpr const_reverse_iterator rend() const noexcept { return const_reverse_iterator{ end() }; }
        constexpr explicit set() : __base{} {}
        constexpr set(set const& that) : __base{ that } {}
        constexpr set(set && that) : __base{ move(that) } {}
        template<std::matching_input_iterator<value_type> IT> constexpr set(IT start, IT end) : __base{ start, end } {}
        constexpr set(std::initializer_list<value_type> ilist) : __base{ ilist.begin(), ilist.end() } {}
        constexpr void clear() { this->__clear(); }
        template<typename ... Args> requires constructible_from<value_type, Args...> pair<iterator, bool> emplace(Args&& ... args) { __res_t res = this->__emplace_unique(std::forward<Args>(args)...); return pair{ iterator{ res.first }, res.second }; }
        template<typename ... Args> requires constructible_from<value_type, Args...> iterator emplace_hint(const_iterator hint, Args&& ... args) { return iterator{ this->__hint_emplace_unique(hint.get_node(), std::forward<Args>(args)...) }; }
        template<typename U> requires (__valid_comparator<key_compare, value_type, U> || is_convertible_v<U, key_type>) constexpr iterator find(U const& u) noexcept { return iterator{ this->__find_node(u) }; }
        template<typename U> requires (__valid_comparator<key_compare, value_type, U> || is_convertible_v<U, key_type>) constexpr const_iterator find(U const& u) const noexcept { return const_iterator{ this->__find_node(u) }; }
        pair<iterator, bool> insert(value_type&& vt) { __res_t res = this->__insert_unique(std::forward<value_type>(vt)); return pair{ iterator{ res.first }, res.second }; }
        pair<iterator, bool> insert(value_type const& vt) { __res_t res = this->__insert_unique(vt); return pair{ iterator{ res.first }, res.second }; }
        iterator insert(const_iterator pos, value_type const& value) { return iterator{ this->__hint_insert_unique(pos.get_node(), value) }; }
        iterator insert(const_iterator pos, value_type&& value) { return iterator{ this->__hint_insert_unique(pos.get_node(), forward<value_type>(value)) }; }
        template<std::matching_input_iterator<value_type> IT> void insert(IT first, IT last) { this->__insert_range_unique(first, last); }
        void insert(std::initializer_list<value_type> ilist) { insert(ilist.begin(), ilist.end()); }
        template<typename U> requires (__valid_comparator<key_compare, value_type, U> || is_convertible_v<U, key_type>) size_type erase(U const& what) { __link_t r = this->__find_node(what); if(r == this->__end()) { return 0; } else { this->__erase_node(r); return 1; } }
        iterator erase(iterator pos) { return iterator{ this->__erase_node(pos.get_node()) }; }
        iterator erase(const_iterator pos) { return iterator{ this->__erase_node(const_cast<__link_t>(pos.get_node())) }; }
        iterator erase(const_iterator start, const_iterator end) { return iterator{ this->__erase_nodes(const_cast<__link_t>(start.get_node()), const_cast<__link_t>(end.get_node())) }; }
        constexpr void swap(set& that) noexcept { this->__swap(that); }
        template<typename U> requires (__valid_comparator<key_compare, value_type, U> || is_convertible_v<U, key_type>) constexpr bool contains(U const& u) const noexcept { return this->__contains(u); }
    };
}
#endif