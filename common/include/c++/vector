#ifndef __VECTOR
#define __VECTOR
#include "bits/stl_iterator.hpp"
#include "bits/stl_allocator.h"
#include "bits/dynamic_buffer.hpp"
namespace std
{
    template<typename T, std::allocator_object<T> A = std::allocator<T>>
    class vector : protected __impl::__dynamic_buffer<T, A>
    {
        typedef __impl::__dynamic_buffer<T, A> __base;
    public:
        typedef T value_type;
        typedef typename __base::__alloc_type allocator_type;
        typedef typename __base::__size_type size_type;
        typedef typename __base::__diff_type difference_type;
        typedef typename __base::__ref reference;
        typedef typename __base::__const_ref const_reference;
        typedef typename __base::__ptr pointer;
        typedef typename __base::__const_ptr const_pointer;
        typedef ::__impl::__iterator<pointer, vector> iterator;
        typedef ::__impl::__iterator<const_pointer, vector> const_iterator;
        typedef std::reverse_iterator<iterator> reverse_iterator;
        typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
        constexpr explicit vector(allocator_type const& alloc) noexcept : __base{ alloc } {}
        constexpr vector() noexcept(noexcept(allocator_type())) : __base{} {}
        constexpr explicit vector(size_type count) noexcept : __base{ count, allocator_type{} } {}
        constexpr explicit vector(size_type count, const_reference value, allocator_type const& alloc = allocator_type{}) : __base{ count, value, alloc } {}
        template<std::matching_input_iterator<value_type> IT> constexpr vector(IT start, IT end, allocator_type const& alloc = allocator_type{}) : __base{ start, end, alloc } {}
        constexpr vector(vector const& that) : __base{ static_cast<__base const&>(that) } {}
        constexpr vector(vector&& that) : __base{ forward<__base>(that) } {}
        constexpr vector(vector const& that, allocator_type const& alloc) : __base{ static_cast<__base const&>(that), alloc } {}
        constexpr vector(vector&& that, allocator_type const& alloc) : __base{ forward<__base>(that), alloc } {}
        constexpr vector(initializer_list<T> init, allocator_type const& alloc = allocator_type{}) : __base{ init, alloc } {}
        constexpr vector& operator=(vector const& that) { this->__copy_assign(that); return *this; }
        constexpr vector& operator=(vector&& that) { this->__realloc_move(move(that)); return *this; }
        constexpr allocator_type get_allocator() const noexcept { return this->__allocator; }
        constexpr pointer data() noexcept { return this->__beg(); }
        constexpr const_pointer data() const noexcept { return this->__beg(); }
        constexpr reference at(size_type i) { return this->__get(i); }
        constexpr const_reference at(size_type i ) const { return this->__get(i); }
        constexpr reference operator[](size_type i) { return this->__get(i); }
        constexpr const_reference operator[](size_type i ) const { return this->__get(i); }
        constexpr reference front() { return this->__get(0); }
        constexpr const_reference front() const { return this->__get(0); }
        constexpr reference back() { return this->__get_last(); }
        constexpr const_reference back() const { return this->__get_last(); }
        constexpr iterator begin() { return iterator{ this->__beg() }; }
        constexpr const_iterator cbegin() const { return const_iterator{ this->__beg() }; }
        constexpr const_iterator begin() const { return cbegin(); }
        constexpr iterator end() { return iterator{ this->__cur() }; }
        constexpr const_iterator cend() const { return const_iterator{ this->__cur() }; }
        constexpr const_iterator end() const { return cend(); }
        constexpr reverse_iterator rbegin() { return reverse_iterator{ begin() }; }
        constexpr const_reverse_iterator crbegin() const { return const_reverse_iterator{ cbegin() }; }
        constexpr const_reverse_iterator rbegin() const { return crbegin(); }
        constexpr reverse_iterator rend() { return reverse_iterator{ end() }; }
        constexpr const_reverse_iterator crend() const { return const_reverse_iterator{ cend() }; }
        constexpr const_reverse_iterator rend() const { return crend(); }
        constexpr bool empty() const noexcept { return this->__size() == 0; }
        constexpr size_t size() const noexcept { return this->__size(); }
        constexpr size_t max_size() const noexcept { return this->__max_capacity(); }
        constexpr void reserve(size_type count) { if(count > this->__capacity()) this->__grow_buffer(size_type(count - this->__capacity())); }
        constexpr size_type capacity() const noexcept { return this->__capacity(); }
        constexpr void shrink_to_fit() { this->__trim_buffer(); }
        constexpr void clear() { this->__clear(); }
        constexpr iterator find(const_reference what) requires equality_comparable<value_type> { for(iterator i = begin(); i != end(); i++) { if(*i == what) return i; } return end(); }
        constexpr const_iterator find(const_reference what) const requires equality_comparable<value_type> { for(const_iterator i = begin(); i != end(); i++) { if(*i == what) return i; } return end(); }
        constexpr iterator insert(const_iterator pos, const_reference value) { return iterator { this->__insert_element(pos.base(), value) }; }
        template<std::matching_input_iterator<value_type> IT> constexpr iterator insert(const_iterator pos, IT start, IT end) { return iterator{ this->template __insert_elements<IT>(pos.base(), start, end) }; }
        template<typename ... Args> requires constructible_from<T, Args...> constexpr iterator emplace(const_iterator pos, Args&& ... args) { return iterator{ this->__emplace_element(pos.base(), forward<Args>(args)...) }; }
        template<typename ... Args> requires constructible_from<T, Args...> constexpr reference emplace_back(Args&& ... args) { return *(this->__emplace_at_end(std::forward<Args>(args)...)); }
        constexpr void push_back(const_reference value) { this->__append_element(value); }
        template<std::matching_input_iterator<value_type> IT> constexpr void push_back(IT start, IT end) { this->__append_elements(start, end); }
        constexpr void pop_back() { this->__erase_at_end(1); }
        constexpr iterator erase(const_iterator pos) { return iterator { this->__erase(pos.base()) }; }
        constexpr iterator erase(const_iterator start, const_iterator end) { return iterator { this->__erase_range(start.base(), end.base()) }; }
        constexpr void swap(vector& that) { this->__swap(that); }
        extension constexpr vector reverse() const { return vector{ this->crend(), this->crbegin(), this->__allocator }; }
        extension constexpr void expand_to_size() noexcept { this->__setc(this->__max()); }
        extension template<typename ... Args> requires constructible_from<T, Args...> constexpr bool set_at(size_t i, Args&& ... args) { if(i < capacity()) { std::construct_at(this->__get_ptr(i), std::forward<Args>(args)...); if(i >= size()) this->__setc(i); return true; } return false; }
    };
}
#endif