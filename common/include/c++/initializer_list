#ifndef __INITIALIZER_LIST
#define __INITIALIZER_LIST
namespace std
{
  template<class ET>
  class initializer_list
  {
  public:
    typedef ET 		      value_type;
    typedef const ET& 	reference;
    typedef const ET& 	const_reference;
    typedef size_t 	    size_type;
    typedef const ET* 	iterator;
    typedef const ET* 	const_iterator;
  private:
    iterator			__my_array;
    size_type			__len;
    constexpr initializer_list(const_iterator __a, size_type __l) : __my_array(__a), __len(__l) {}
  public:
    constexpr initializer_list() noexcept : __my_array(nullptr), __len(0UL) {}
    constexpr size_type size() const noexcept { return __len; }
    constexpr const_iterator begin() const noexcept { return __my_array; }
    constexpr const_iterator end() const noexcept { return begin() + size(); }
  };
  template<class T> constexpr const T* begin(initializer_list<T> __ils) noexcept { return __ils.begin(); }
  template<class T> constexpr const T* end(initializer_list<T> __ils) noexcept { return __ils.end(); }
}
#endif